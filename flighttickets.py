# -*- coding: utf-8 -*-
"""flighttickets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvShfwkA1notDw6T5CDXuY1iwOdXjb9D
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer     
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from xgboost import  XGBRFRegressor

train_data=pd.read_excel("/content/drive/MyDrive/flight dataset/Data_Train.xlsx")
test_data=pd.read_excel("/content/drive/MyDrive/flight dataset/Test_set.xlsx")
train_data.shape

df=train_data.append(test_data,sort=False)
df.head()

df["journey_day"]=df['Date_of_Journey'].str.split('/').str[0]
df["journey_month"]=df['Date_of_Journey'].str.split('/').str[1]
df["journey_year"]=df['Date_of_Journey'].str.split('/').str[2]
df.journey_day=df['journey_day'].astype(int)
df.journey_month=df['journey_month'].astype(int)
df.journey_year=df['journey_year'].astype(int)
df.drop(columns='Date_of_Journey',axis=1,inplace=True)
df.head()

df['Total_Stops']=df['Total_Stops'].replace("non-stop",'0 stops')
df.Total_Stops.fillna('0 s',inplace=True)
df['stops']=df['Total_Stops'].str.split(' ').str[0]
df.stops=df['stops'].astype(int)
df.drop(columns='Total_Stops',axis=1,inplace=True)
df.head()

df[df.Route.isnull()]
df.Route.fillna('none',inplace=True)
df.isnull().sum()

df['route 1']=df.Route.str.split('→').str[0]
df['route 2']=df.Route.str.split('→').str[1]
df['route 3']=df.Route.str.split('→').str[2]
df['route 4']=df.Route.str.split('→').str[3]
df['route 5']=df.Route.str.split('→').str[4]
df['route 6']=df.Route.str.split('→').str[5]
df.isnull().sum()

df['route 2'].fillna('None',inplace=True) 
df['route 3'].fillna('None',inplace=True)
df['route 4'].fillna('None',inplace=True)
df['route 5'].fillna('None',inplace=True)
df['route 6'].fillna('None',inplace=True)
df.isnull().sum()

df.drop(columns='Route',axis=1,inplace=True)

df.head()

df['dep_hour']=df['Dep_Time'].str.split(':').str[0]
df['dep_min']=df['Dep_Time'].str.split(':').str[1]
df['dep_hour']=df['dep_hour'].astype(int)
df['dep_min']=df['dep_min'].astype(int)
df.drop(columns='Dep_Time',axis=1,inplace=True)
df.dtypes

df['duration_hour']=df['Duration'].str.split('h').str[0]
df['duration_min']=df['Duration'].str.split(' ').str[1]
df.duration_min=df.duration_min.str.split('m').str[0]
df.duration_hour.fillna('0',inplace=True)
df.duration_min.fillna('0',inplace=True)
df.duration_min=df.duration_min.astype(int)

df.duration_hour.replace('5m','0',inplace=True)
df.duration_hour=df.duration_hour.astype(int)

df.drop(columns='Duration',axis=1,inplace=True)
df.dtypes

df['Arrival_hour']=df['Arrival_Time'].str.split(':').str[0]
df['Arrival_min']=df['Arrival_Time'].str.split(':').str[1]
df['Arrival_date']=df.Arrival_min.str.split(' ').str[1]
df['Arrival_month']=df.Arrival_min.str.split(' ').str[2]
df['Arrival_min']=df.Arrival_min.str.split(' ').str[0]
df['Arrival_hour']=df['Arrival_hour'].astype(int)
df['Arrival_min']=df['Arrival_min'].astype(int)
df.drop(columns='Arrival_Time',axis=1,inplace=True)
df.dtypes

df.Arrival_date.fillna(df.journey_day,inplace=True)
 df.Arrival_month.fillna("None",inplace=True)
df.Arrival_date=df.Arrival_date.astype(int)
df.dtypes

encoder=LabelEncoder()
df.Airline=encoder.fit_transform(df.Airline)
df.Source=encoder.fit_transform(df.Source)
df.Destination=encoder.fit_transform(df.Destination)
df.Additional_Info=encoder.fit_transform(df.Additional_Info)
df['route 1']=encoder.fit_transform(df['route 1'])
df['route 2']=encoder.fit_transform(df['route 2'])
df['route 3']=encoder.fit_transform(df['route 3'])
df['route 4']=encoder.fit_transform(df['route 4'])
df['route 5']=encoder.fit_transform(df['route 5'])
df['route 6']=encoder.fit_transform(df['route 6'])
df.Arrival_month=encoder.fit_transform(df.Arrival_month)
df.isnull().sum()

train_df=df[:10683]
X=train_df.drop(columns='Price',axis=1)
y=train_df.Price
X.shape
y.isnull().sum()



Test=df[10683:]
test_df=Test.drop(columns='Price',axis=1)
test_df.isnull().sum()

X.describe()

model=LinearRegression()
X_train,X_test,Y_train,Y_test=train_test_split(X,y,test_size=0.250023,random_state=0)
model.fit(X_train,Y_train)
y_pred=model.predict(test_df)

model.score(X_test,Y_test)
-np.sqrt(np.square(np.log10(y_pred +1)-np.log10(Y_test +1)).mean())

model2=RandomForestRegressor(n_estimators=22)
model2.fit(X_train,Y_train)

y2_pred=model2.predict(test_df)
model2.score(X_test,Y_test)
-np.sqrt(np.square(np.log10(y2_pred +1)-np.log10(Y_test +1)).mean())

my_model=XGBRegressor(n_estimators=3000,early_stopping_rounds=10,n_jobs=5)
my_model.fit(X_train,Y_train)
y3=my_model.predict(test_df)
-np.sqrt(np.square(np.log10(y3 +1)-np.log10(Y_test +1)).mean())

model_3=XGBRFRegressor(n_estimators=3000,early_stopping_rounds=10,n_jobs=5,learning_rate=0.2)
model_3.fit(X_train,Y_train)
y4=model_3.predict(test_df)
-np.sqrt(np.square(np.log10(y4 +1)-np.log10(Y_test +1)).mean())

pdf=pd.DataFrame({'Price':y4})
pdf.to_excel('/content/drive/MyDrive/xgrfoutput.xlsx',index=False)

